Task 2: This deals with API programming.

You have a metric collector service. It handles all the requests with an HTTP
endpoint. But this endpoint doesnâ€™t do anything more than dispatching these
requests to Rabbit MQ. All the requests will be processed by async workers. The
system has three async workers.

Write the async workers so that they match the following design descriptions
below:

First one (distinctName) collects daily occurrences of distinct events in Redis.
Metrics that are older than 30 days are merged into a monthly bucket, then
cleared.

Second one (hourlyLog) collects all items that occurred in the last hour into
MongoDB (Bonus: how would you calculate the average of incoming values in a
distributed environment?)

Third one (accountName) collects all the account names that sent metrics, with
their first occurrence datetime (UTC) into PostgreSQL.

Data sample:
{
  "username": "kodingbot",  // string
  "count": 12412414,    // int64
  "metric": "kite_call" // string
}

Important things to keep in mind while developing:

* Logging: Use logging wisely. Debug mode should be verbose enough to understand
the program flow. Stay away from unnecessary usage of info, error, warning etc
levels of logs.

* Metrics: How many requests were handled? How long did they take? What are our
average values? etc..

* Distributed Architecture: All of the workers can be scaled horizontally.

* Fault Tolerance: Crash of a worker should not cause any data loss. Retry
system for failed tasks should be in place.


Code should be written in Go (golang)
